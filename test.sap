# test.sap

import "std";

let serif = builtin::find_font_family(["XCharter", "Times New Roman", "serif"]);
let sans = builtin::find_font_family(["Myriad Pro", "Helvetica", "sans-serif"]);

sans!.regular.adjust_glyph_spacing({ match: ["1.4"], adjust: [0.0, -0.04, 0.0] });
sans!.regular.adjust_glyph_spacing({ match: ["1.2", "1.3", "1.5", "1.6", "1.7", "1.8", "1.9"], adjust: [0.0, -0.07, 0.0] });
sans!.regular.adjust_glyph_spacing({ match: ["2.1", "3.1", "4.1", "5.1", "6.1", "8.1", "9.1", "0.1"], adjust: [0.0, +0.05, 0.0] });

\start_document({
	serif_font_family: *serif,
	sans_font_family: *sans,
	paper_size: std::paper_size::A4,
	margins: { left: 2cm, right: 2cm, top: 2cm, bottom: 2cm },
	default_style: {
		font_size: 12pt,
		line_spacing: 2,
		sentence_space_stretch: 1.3,
		paragraph_spacing: 1.5em,
	}
});

\script::{
	# using std;
	using builtin;

	enum Hello
	{
		a;
		b;
		c;
	};

	fn cpp() -> Inline
	{
		let c = \{C}.set_width(0.56em);
		var p1 = bold1(\{+}).apply_style({ font_size: 0.875em, });
		var p2 = bold1(\{+}).apply_style({ font_size: 0.875em, });

		p1.set_width(0.6em);
		p1.raise(0.05em);
		p2.raise(0.05em);

		return make_span(glue: true, *c, *p1, *p2);
	}

	fn kekw() -> Inline
	{
		var k: Hello = .a;
		k = .b;
		k = Hello::c;

		return italic1(make_span(\{asdf}, cpp()));
	}

	union PathObject
	{
		Line(a: int);
	};

	fn asdf()
	{
		let p: PathObject = .Line(a: 10);
		if(let .Line(a: a) = p)
		{
		}
	}

	fn bsdf() -> ?Inline
	{
		asdf();
		return null;
	}
}

# \disable_page_numbering();

hello \cpp() there \kekw() \bsdf()
