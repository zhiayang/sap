# test.sap

# import "std";
import "std/table.sap";

# let serif = builtin::find_font_family(["XCharter", "Times New Roman", "serif"]);
# let sans = builtin::find_font_family(["Myriad Pro", "Helvetica", "sans-serif"]);

# sans!.regular.adjust_glyph_spacing({ match: ["1.4"], adjust: [0.0, -0.04, 0.0] });
# sans!.regular.adjust_glyph_spacing({ match: ["1.2", "1.3", "1.5", "1.6", "1.7", "1.8", "1.9"], adjust: [0.0, -0.07, 0.0] });
# sans!.regular.adjust_glyph_spacing({ match: ["2.1", "3.1", "4.1", "5.1", "6.1", "8.1", "9.1", "0.1"], adjust: [0.0, +0.05, 0.0] });

\start_document({
	# serif_font_family: *serif,
	# sans_font_family: *sans,
	# paper_size: std::paper_size::A4,
	margins: { left: 2cm, right: 2cm, top: 2cm, bottom: 2cm },
	default_style: {
		# font_size: 12pt,
		line_spacing: 0.5,
		# sentence_space_stretch: 1.3,
		# paragraph_spacing: 1.5em,
	},
});

\script::{
	# using std;
	using builtin;

	# enum Hello
	# {
	# 	a;
	# 	b;
	# 	c;
	# };

	# fn cpp() -> Inline
	# {
	# 	let c = \{C}.set_width(0.56em);
	# 	var p1 = bold1(\{+}).apply_style({ font_size: 0.875em, });
	# 	var p2 = bold1(\{+}).apply_style({ font_size: 0.875em, });

	# 	p1.set_width(0.6em);
	# 	p1.raise(0.05em);
	# 	p2.raise(0.05em);

	# 	return make_span(glue: true, *c, *p1, *p2);
	# }

	# fn kekw() -> Inline
	# {
	# 	var k: Hello = .a;
	# 	k = .b;
	# 	k = Hello::c;

	# 	return italic1(make_span(\{asdf}, cpp()));
	# }

	# union AAA
	# {
	# 	Bar(a: int);
	# 	Foo(a: int);
	# };

	# fn asdf()
	# {
	# 	# csdf(.Foo);
	# 	var p: AAA = .Bar(a: 10);

	# 	# cast(p, .Line).a = 69;
	# 	# println(f"{cast(p, .Line).a}");


	# 	if(let .Foo(&mut a: x) = p)
	# 	{
	# 		x! = 30;
	# 		println(f"hello!: {cast(p, .Bar).a}");
	# 	}
	# 	else
	# 	{
	# 		println("oh no");
	# 	}
	# }

	# fn bsdf() -> ?Inline
	# {
	# 	let a: ?int = 500;
	# 	let b: ?int = null;

	# 	if(let aa = a)  println(f"a has a value: {a}");
	# 	else            println(f"a has no value");

	# 	if(let bb = b)  println(f"b has a value: {b}");
	# 	else            println(f"b has no value");

	# 	asdf();
	# 	return null;
	# }


	fn haha() -> ?Block
	{
		return make_path(style: {
			stroke_colour: Colour {type: .RGB, rgb: {r: 1, g: 0, b: 0}},
			line_width: 0.2cm,
		# }, .Move(pos: {x:0cm, y:5cm}), .Line(pos: {x:0cm, y:0cm}), .Line(pos: {x:5cm, y:0cm}));
		}, .Move(pos: {x:0cm, y:0cm}), .CubicBezier(c1: {x:6cm, y:3cm}, c2: {x:6cm, y:6cm}, end: {x:0cm, y:9cm}),
		.CubicBezier(c1: {x:-6cm, y:12cm}, c2: {x:-6cm, y:15cm}, end: {x:0cm, y:18cm}));
	}
}

# \std::disable_page_numbering();

# hello \cpp() there \kekw() \bsdf()

aaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaa

Clearly, there is a missing middle ground, which is where our proposed CS3xxx
course will fit in. By using a simpler OS implementation that is designed for
teaching OS concepts, students will be able to grasp these fundamentals in a
more digestible manner. Furthermore, by giving students a fully-working kernel
as the basis for their lab assignments, we are free to assign more open-ended
problems that allow students flexibility in their designs.

\vspace(-1em);

\std::table({cols: 4});

# \haha()

hellohellohellohellohellohellohellohellohellohellohellohellohellohello



