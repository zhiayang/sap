%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
version: 2
name: sap
file_extensions:
  - sap
scope: source.sap
contexts:
  # Rule: array-literal
  array-literal|0:
    - match: ':'
      scope: punctuation.colon.sap
      set: array-literal|1
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [array-literal|2, array-literal|3, binop-expr2|0, unary-expr|0]
    - match: '\]'
      scope: punctuation.bracket.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: array-literal
  array-literal|1:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: array-literal|2
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: array-literal|2
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [array-literal|2, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [array-literal|2, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: array-literal|2
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [array-literal|2, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [array-literal|2, type|5]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: array-literal
  array-literal|2:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      push: [array-literal|3, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      push: [array-literal|3, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      push: [array-literal|3, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      push: [array-literal|3, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      push: [array-literal|3, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      push: [array-literal|3, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      push: [array-literal|3, binop-expr2|0, unary-expr|0]
    - match: '\]'
      scope: punctuation.bracket.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: array-literal
  array-literal|3:
    - match: ','
      scope: punctuation.comma.sap
      pop: true
    - match: '(?=\S)'
      pop: true
  # Rule: binop-expr2
  binop-expr2|0:
    - match: '//'
      scope: keyword.operator.binop.struct-update.sap
      set: binop-expr2|1
    - match: '\+='
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '-='
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '\*='
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '/='
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '%='
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '<='
      scope: keyword.operator.binop.compare.sap
      set: binop-expr2|2
    - match: '>='
      scope: keyword.operator.binop.compare.sap
      set: binop-expr2|2
    - match: '=='
      scope: keyword.operator.binop.compare.sap
      set: binop-expr2|2
    - match: '!='
      scope: keyword.operator.binop.compare.sap
      set: binop-expr2|2
    - match: '\?\?'
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: 'and'
      scope: keyword.operator.binop.logical.sap
      set: binop-expr2|2
    - match: 'or'
      scope: keyword.operator.binop.logical.sap
      set: binop-expr2|2
    - match: '&&'
      scope: keyword.operator.binop.logical.sap
      set: binop-expr2|2
    - match: '\|\|'
      scope: keyword.operator.binop.logical.sap
      set: binop-expr2|2
    - match: '\+'
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '-'
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '\*'
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '/'
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '%'
      scope: keyword.operator.binop.arith.sap
      set: binop-expr2|2
    - match: '<'
      scope: keyword.operator.binop.compare.sap
      set: binop-expr2|2
    - match: '>'
      scope: keyword.operator.binop.compare.sap
      set: binop-expr2|2
    - match: '≤'
      scope: keyword.operator.binop.compare.sap
      set: binop-expr2|2
    - match: '≥'
      scope: keyword.operator.binop.compare.sap
      set: binop-expr2|2
    - match: '='
      scope: keyword.operator.binop.assign.sap
      set: binop-expr2|2
    - match: '(?=;)'
      pop: true
    - match: '(?=\S)'
      pop: true
  # Rule: binop-expr2
  binop-expr2|1:
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [binop-expr2|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: binop-expr2|0
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: binop-expr2
  binop-expr2|2:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: binop-expr
  binop-expr|0:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: block-comment
  block-comment|0:
    - meta_content_scope: comment.block.sap
    - match: '(/#)'
      scope: comment.block.sap comment.block.sap punctuation.definition.comment.sap
      push: [block-comment|meta, block-comment|0]
    - match: '(?!#/).'
      scope: comment.block.sap
    - match: '(#/)'
      scope: comment.block.sap punctuation.definition.comment.sap
      pop: true
    - match: '(?=\S)'
      set: block-comment|1
  # Rule: block-comment
  block-comment|1:
    - meta_content_scope: comment.block.sap
    - match: '(#/)'
      scope: comment.block.sap punctuation.definition.comment.sap
      pop: true
  # Meta scope context for block-comment
  block-comment|meta:
    - meta_content_scope: comment.block.sap
    - match: ''
      pop: true
  # Rule: block-stmt
  block-stmt|0:
    - match: '\s*\{'
      scope: punctuation.brace.block-start.sap
      set: block-stmt|1
    - match: '(/#)'
      scope: comment.block.sap punctuation.definition.comment.sap
      set: block-comment|0
    - match: '(#+).*\n?'
      scope: comment.line.sap
      captures:
        1: punctuation.definition.comment.sap
      pop: true
    - match: 'fn'
      scope: storage.type.sap
      set: func-defn|0
    - match: '(global\s+)?(var|let)'
      captures:
        1: storage.modifier.sap
        2: storage.type.sap
      set: var-defn|0
    - match: 'struct'
      scope: storage.type.sap
      set: struct-defn|0
    - match: 'enum'
      scope: storage.type.sap
      set: enum-defn|0
    - match: 'return'
      scope: keyword.return.sap
      set: return-stmt|0
    - match: 'if'
      scope: meta.control-flow.if-stmt.sap keyword.if.sap
      set: if-stmt|0
    - match: 'else'
      scope: meta.control-flow.else-stmt.sap keyword.else.sap
      set: [else-stmt|meta, block-stmt|0]
    - match: 'break'
      scope: keyword.break.sap
      set: break-stmt|0
    - match: 'continue'
      scope: keyword.continue.sap
      set: continue-stmt|0
    - match: 'import'
      scope: keyword.import.sap
      set: import-stmt|0
    - match: 'using'
      scope: keyword.using.sap
      set: using-stmt|0
    - match: 'namespace'
      scope: meta.namespace-defn.sap keyword.sap
      set: namespace-defn|0
    - match: 'while'
      scope: keyword.while.sap
      set: while-loop|0
    - match: 'for'
      scope: keyword.for.sap
      set: for-loop|0
    - match: '(@\s*(?:layout|position|post|finalise|render))(?=\s+|\{)'
      captures:
        1: storage.modifier.sap
      set: block-stmt|0
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [stmt|0, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [stmt|0, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: block-stmt
  block-stmt|1:
    - match: '(/#)'
      scope: comment.block.sap punctuation.definition.comment.sap
      push: block-comment|0
    - match: '(#+).*\n?'
      scope: comment.line.sap
      captures:
        1: punctuation.definition.comment.sap
    - match: 'fn'
      scope: storage.type.sap
      push: func-defn|0
    - match: '(global\s+)?(var|let)'
      captures:
        1: storage.modifier.sap
        2: storage.type.sap
      push: var-defn|0
    - match: 'struct'
      scope: storage.type.sap
      push: struct-defn|0
    - match: 'enum'
      scope: storage.type.sap
      push: enum-defn|0
    - match: 'return'
      scope: keyword.return.sap
      push: return-stmt|0
    - match: 'if'
      scope: meta.control-flow.if-stmt.sap keyword.if.sap
      push: if-stmt|0
    - match: 'else'
      scope: meta.control-flow.else-stmt.sap keyword.else.sap
      push: [else-stmt|meta, block-stmt|0]
    - match: 'break'
      scope: keyword.break.sap
      push: break-stmt|0
    - match: 'continue'
      scope: keyword.continue.sap
      push: continue-stmt|0
    - match: 'import'
      scope: keyword.import.sap
      push: import-stmt|0
    - match: 'using'
      scope: keyword.using.sap
      push: using-stmt|0
    - match: 'namespace'
      scope: meta.namespace-defn.sap keyword.sap
      push: namespace-defn|0
    - match: 'while'
      scope: keyword.while.sap
      push: while-loop|0
    - match: 'for'
      scope: keyword.for.sap
      push: for-loop|0
    - match: '(@\s*(?:layout|position|post|finalise|render))(?=\s+|\{)'
      captures:
        1: storage.modifier.sap
      push: block-stmt|0
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      push: [stmt|0, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: ';'
      scope: punctuation.terminator.sap
    - match: '\}'
      scope: punctuation.brace.block-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: break-stmt
  break-stmt|0:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: cast-expr
  cast-expr|0:
    - match: '\('
      scope: punctuation.paren.sap
      set: cast-expr|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: cast-expr
  cast-expr|1:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [cast-expr|2, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [cast-expr|2, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [cast-expr|2, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [cast-expr|2, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [cast-expr|2, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [cast-expr|2, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [cast-expr|2, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: cast-expr
  cast-expr|2:
    - match: ','
      scope: punctuation.comma.sap
      set: cast-expr|3
    - match: '\)'
      scope: punctuation.paren.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: cast-expr
  cast-expr|3:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [cast-expr|4, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [cast-expr|4, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [cast-expr|4, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [cast-expr|4, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [cast-expr|4, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [cast-expr|4, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [cast-expr|4, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: cast-expr
  cast-expr|4:
    - match: '\)'
      scope: punctuation.paren.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: continue-stmt
  continue-stmt|0:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: document-start
  document-start|0:
    - match: '\('
      scope: punctuation.paren.call-start.sap
      set: document-start|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: document-start
  document-start|1:
    - match: '([A-Za-z_][[:word:]]*)\s*(:)\s*(?!:)'
      captures:
        1: variable.parameter.sap
        2: punctuation.colon.sap
      set: [document-start|2, binop-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [document-start|2, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [document-start|2, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [document-start|2, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [document-start|2, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [document-start|2, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [document-start|2, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [document-start|2, binop-expr2|0, unary-expr|0]
    - match: '\)'
      scope: punctuation.paren.call-end.sap
      set: document-start|7
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: document-start
  document-start|2:
    - include: include!document-start@1
    - match: '\)'
      scope: punctuation.paren.call-end.sap
      set: document-start|7
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  document-start|3|document-start@1:
    - meta_include_prototype: false
    - match: ','
      scope: punctuation.comma.sap
      push: document-start|4|document-start@1
      pop: true
  # Rule: document-start
  #  For branch point 'document-start@1'
  document-start|4|document-start@1:
    - match: '([A-Za-z_][[:word:]]*)\s*(:)\s*(?!:)'
      captures:
        1: variable.parameter.sap
        2: punctuation.colon.sap
      set: binop-expr|0
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [binop-expr2|0, unary-expr|0]
    - match: '\S'
      fail: document-start@1
  document-start|5|document-start@1:
    - meta_include_prototype: false
    - match: ','
      scope: punctuation.comma.sap
      push: document-start|6|document-start@1
  # Rule: document-start
  #  For branch point 'document-start@1'
  document-start|6|document-start@1:
    - match: '\)'
      scope: punctuation.paren.call-end.sap
      set: document-start|7
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: document-start
  document-start|7:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '(?=\S)'
      pop: true
  # Meta scope context for else-stmt
  else-stmt|meta:
    - meta_content_scope: meta.control-flow.else-stmt.sap
    - match: ''
      pop: true
  # Rule: enum-defn
  enum-defn|0:
    - match: '[A-Za-z_][[:word:]]*'
      scope: entity.name.enum.sap
      set: enum-defn|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: enum-defn
  enum-defn|1:
    - match: ':'
      scope: punctuation.colon.sap
      set: enum-defn|2
    - match: '\{'
      scope: punctuation.brace.sap
      set: enum-defn|4
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: enum-defn
  enum-defn|2:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: enum-defn|3
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: enum-defn|3
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [enum-defn|3, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [enum-defn|3, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: enum-defn|3
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [enum-defn|3, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [enum-defn|3, type|5]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: enum-defn
  enum-defn|3:
    - match: '\{'
      scope: punctuation.brace.sap
      set: enum-defn|4
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: enum-defn
  enum-defn|4:
    - match: '[A-Za-z_][[:word:]]*'
      scope: entity.name.enum-enumerator.sap
      push: enum-enumerator-defn|0
    - match: '\}'
      scope: punctuation.brace.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: enum-enumerator-defn
  enum-enumerator-defn|0:
    - match: '='
      scope: keyword.operator.sap
      set: enum-enumerator-defn|1
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: enum-enumerator-defn
  enum-enumerator-defn|1:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [enum-enumerator-defn|2, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: enum-enumerator-defn
  enum-enumerator-defn|2:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: enum-literal
  enum-literal|0:
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.enumerator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|0:
    - match: '\('
      scope: punctuation.paren.while-start.sap
      set: for-loop|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|1:
    - match: 'var|let'
      scope: storage.type.sap
      set: for-loop|2
    - match: ';'
      scope: punctuation.semicolon.sap
      set: for-loop|8
    - match: '&'
      scope: keyword.operator.type.sap
      set: for-loop|12
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.variable.sap
      set: for-loop|14
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|10:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: '\)'
      scope: punctuation.paren.while-end.sap
      set: block-stmt|0
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|11:
    - match: '\)'
      scope: punctuation.paren.while-end.sap
      set: block-stmt|0
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|12:
    - match: 'mut'
      scope: storage.modifier.mut.sap
      set: for-loop|13
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.variable.sap
      set: for-loop|14
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|13:
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.variable.sap
      set: for-loop|14
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|14:
    - match: 'in'
      scope: keyword.in.sap
      set: for-loop|15
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|15:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [for-loop|11, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [for-loop|11, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|2:
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.variable.sap
      set: for-loop|3
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|3:
    - match: ':'
      scope: punctuation.colon.sap
      set: for-loop|4
    - match: '='
      scope: keyword.operator.sap
      set: for-loop|6
    - match: ';'
      scope: punctuation.semicolon.sap
      set: for-loop|8
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|4:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: for-loop|5
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: for-loop|5
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [for-loop|5, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [for-loop|5, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: for-loop|5
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [for-loop|5, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [for-loop|5, type|5]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|5:
    - match: '='
      scope: keyword.operator.sap
      set: for-loop|6
    - match: ';'
      scope: punctuation.semicolon.sap
      set: for-loop|8
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|6:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [for-loop|7, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [for-loop|7, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [for-loop|7, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [for-loop|7, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [for-loop|7, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [for-loop|7, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [for-loop|7, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|7:
    - match: ';'
      scope: punctuation.semicolon.sap
      set: for-loop|8
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|8:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [for-loop|9, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [for-loop|9, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [for-loop|9, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [for-loop|9, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [for-loop|9, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [for-loop|9, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [for-loop|9, binop-expr2|0, unary-expr|0]
    - match: ';'
      scope: punctuation.semicolon.sap
      set: for-loop|10
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: for-loop
  for-loop|9:
    - match: ';'
      scope: punctuation.semicolon.sap
      set: for-loop|10
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: fstring-contents
  fstring-contents|0:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [fstring-contents|1, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [fstring-contents|1, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [fstring-contents|1, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [fstring-contents|1, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [fstring-contents|1, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [fstring-contents|1, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [fstring-contents|1, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: fstring-contents
  fstring-contents|1:
    - match: '\}'
      scope: punctuation.brace.fstring-expr-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: fstring-literal
  fstring-literal|0:
    - meta_include_prototype: false
    - match: '\\\{|\\\}|\\\\|\\n|\\t|\\b|\\"|\\'''
      scope: constant.character.escape.sap
    - match: '\\x[[:xdigit:]]{2}'
      scope: constant.character.escape.sap
    - match: '\\u[[:xdigit:]]{4}'
      scope: constant.character.escape.sap
    - match: '\\U[[:xdigit:]]{8}'
      scope: constant.character.escape.sap
    - match: '\{'
      scope: punctuation.brace.fstring-expr-start.sap
      push: fstring-contents|0
    - match: '[^"]'
      scope: string.quoted.double.sap
    - match: '(")'
      captures:
        1: punctuation.quote.fstring-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|0:
    - match: '[A-Za-z_][[:word:]]*'
      scope: entity.name.function.sap
      set: func-defn|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|1:
    - match: '\['
      scope: punctuation.paren.generic-params-start.sap
      set: func-defn|2
    - match: '\('
      scope: punctuation.paren.params-start.sap
      set: func-defn|6
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|10:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [func-defn|11, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [func-defn|11, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [func-defn|11, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [func-defn|11, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [func-defn|11, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [func-defn|11, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [func-defn|11, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|11:
    - match: ','
      scope: punctuation.comma.sap
      push: func-defn|12
    - match: '\)'
      scope: punctuation.paren.params-end.sap
      set: func-defn|16
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|12:
    - match: '[A-Za-z_][[:word:]]*'
      scope: variable.parameter.sap
      set: func-defn|13
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|13:
    - match: ':'
      scope: punctuation.colon.sap
      set: func-defn|14
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|14:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: func-defn|15
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: func-defn|15
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [func-defn|15, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [func-defn|15, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: func-defn|15
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [func-defn|15, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [func-defn|15, type|5]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|15:
    - match: '='
      scope: punctuation.equal.sap
      set: binop-expr|0
    - match: '(?=\S)'
      pop: true
  # Rule: func-defn
  func-defn|16:
    - match: '->'
      scope: punctuation.arrow.sap
      set: func-defn|17
    - match: '\{'
      scope: punctuation.brace.sap
      set: func-defn|19
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|17:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: func-defn|18
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: func-defn|18
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [func-defn|18, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [func-defn|18, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: func-defn|18
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [func-defn|18, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [func-defn|18, type|5]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|18:
    - match: '\{'
      scope: punctuation.brace.sap
      set: func-defn|19
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|19:
    - match: '(/#)'
      scope: comment.block.sap punctuation.definition.comment.sap
      push: block-comment|0
    - match: '(#+).*\n?'
      scope: comment.line.sap
      captures:
        1: punctuation.definition.comment.sap
    - match: 'fn'
      scope: storage.type.sap
      push: func-defn|0
    - match: '(global\s+)?(var|let)'
      captures:
        1: storage.modifier.sap
        2: storage.type.sap
      push: var-defn|0
    - match: 'struct'
      scope: storage.type.sap
      push: struct-defn|0
    - match: 'enum'
      scope: storage.type.sap
      push: enum-defn|0
    - match: 'return'
      scope: keyword.return.sap
      push: return-stmt|0
    - match: 'if'
      scope: meta.control-flow.if-stmt.sap keyword.if.sap
      push: if-stmt|0
    - match: 'else'
      scope: meta.control-flow.else-stmt.sap keyword.else.sap
      push: [else-stmt|meta, block-stmt|0]
    - match: 'break'
      scope: keyword.break.sap
      push: break-stmt|0
    - match: 'continue'
      scope: keyword.continue.sap
      push: continue-stmt|0
    - match: 'import'
      scope: keyword.import.sap
      push: import-stmt|0
    - match: 'using'
      scope: keyword.using.sap
      push: using-stmt|0
    - match: 'namespace'
      scope: meta.namespace-defn.sap keyword.sap
      push: namespace-defn|0
    - match: 'while'
      scope: keyword.while.sap
      push: while-loop|0
    - match: 'for'
      scope: keyword.for.sap
      push: for-loop|0
    - match: '(@\s*(?:layout|position|post|finalise|render))(?=\s+|\{)'
      captures:
        1: storage.modifier.sap
      push: block-stmt|0
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      push: [stmt|0, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      push: [stmt|0, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      push: [stmt|0, binop-expr2|0, unary-expr|0]
    - match: ';'
      scope: punctuation.terminator.sap
    - match: '\}'
      scope: punctuation.brace.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|2:
    - match: '[A-Za-z_][[:word:]]*'
      scope: support.type.generic.sap
      set: func-defn|3
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|3:
    - match: ','
      scope: punctuation.comma.sap
      push: func-defn|4
    - match: '\]'
      scope: punctuation.paren.generic-params-end.sap
      set: func-defn|5
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|4:
    - match: '[A-Za-z_][[:word:]]*'
      scope: support.type.generic.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|5:
    - match: '\('
      scope: punctuation.paren.params-start.sap
      set: func-defn|6
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|6:
    - match: '[A-Za-z_][[:word:]]*'
      scope: variable.parameter.sap
      set: func-defn|7
    - match: ','
      scope: punctuation.comma.sap
      set: [func-defn|11, func-defn|12]
    - match: '\)'
      scope: punctuation.paren.params-end.sap
      set: func-defn|16
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|7:
    - match: ':'
      scope: punctuation.colon.sap
      set: func-defn|8
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|8:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: func-defn|9
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: func-defn|9
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [func-defn|9, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [func-defn|9, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: func-defn|9
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [func-defn|9, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [func-defn|9, type|5]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: func-defn
  func-defn|9:
    - match: '='
      scope: punctuation.equal.sap
      set: func-defn|10
    - match: ','
      scope: punctuation.comma.sap
      set: [func-defn|11, func-defn|12]
    - match: '\)'
      scope: punctuation.paren.params-end.sap
      set: func-defn|16
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: if-stmt
  if-stmt|0:
    - meta_content_scope: meta.control-flow.if-stmt.sap
    - match: '\('
      scope: meta.control-flow.if-stmt.sap punctuation.paren.if-start.sap
      set: if-stmt|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: if-stmt
  if-stmt|1:
    - meta_content_scope: meta.control-flow.if-stmt.sap
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: meta.control-flow.if-stmt.sap constant.numeric.length.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: meta.control-flow.if-stmt.sap constant.numeric.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: meta.control-flow.if-stmt.sap constant.language.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: meta.control-flow.if-stmt.sap string.quoted.double.sap punctuation.quote.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      scope: meta.control-flow.if-stmt.sap
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: meta.control-flow.if-stmt.sap punctuation.bracket.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: meta.control-flow.if-stmt.sap punctuation.period.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      scope: meta.control-flow.if-stmt.sap
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      scope: meta.control-flow.if-stmt.sap
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: meta.control-flow.if-stmt.sap string.quoted.single.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: meta.control-flow.if-stmt.sap punctuation.brace.struct-start.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      scope: meta.control-flow.if-stmt.sap
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: meta.control-flow.if-stmt.sap keyword.cast.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: meta.control-flow.if-stmt.sap support.type.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: meta.control-flow.if-stmt.sap punctuation.paren.sap
      set: [if-stmt|2, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: meta.control-flow.if-stmt.sap keyword.operator.ellipsis.sap
      set: [if-stmt|2, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: meta.control-flow.if-stmt.sap keyword.operator.move.sap
      set: [if-stmt|2, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: meta.control-flow.if-stmt.sap keyword.operator.addr.sap
      set: [if-stmt|2, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: meta.control-flow.if-stmt.sap keyword.operator.plus.sap
      set: [if-stmt|2, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: meta.control-flow.if-stmt.sap keyword.operator.minus.sap
      set: [if-stmt|2, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: meta.control-flow.if-stmt.sap keyword.operator.not.sap
      set: [if-stmt|2, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: if-stmt
  if-stmt|2:
    - meta_content_scope: meta.control-flow.if-stmt.sap
    - match: '\)'
      scope: meta.control-flow.if-stmt.sap punctuation.paren.if-end.sap
      set: [if-stmt|meta, block-stmt|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Meta scope context for if-stmt
  if-stmt|meta:
    - meta_content_scope: meta.control-flow.if-stmt.sap
    - match: ''
      pop: true
  # Rule: import-stmt
  import-stmt|0:
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [import-stmt|1, string-literal|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: import-stmt
  import-stmt|1:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Include context for branch point document-start@1
  include!document-start@1:
    - match: '(?=,)'
      branch_point: document-start@1
      branch:
        - document-start|3|document-start@1
        - document-start|5|document-start@1
  # Rule: main
  main:
    - match: '(/#)'
      scope: meta.script.preamble.sap comment.block.sap punctuation.definition.comment.sap
      set: [main|0, preamble|0, block-comment|0]
    - match: '(#+).*\n?'
      scope: meta.script.preamble.sap comment.line.sap
      captures:
        1: punctuation.definition.comment.sap
      set: [main|0, preamble|0]
    - match: 'fn'
      scope: meta.script.preamble.sap storage.type.sap
      set: [main|0, preamble|0, func-defn|0]
    - match: '(global\s+)?(var|let)'
      scope: meta.script.preamble.sap
      captures:
        1: storage.modifier.sap
        2: storage.type.sap
      set: [main|0, preamble|0, var-defn|0]
    - match: 'struct'
      scope: meta.script.preamble.sap storage.type.sap
      set: [main|0, preamble|0, struct-defn|0]
    - match: 'enum'
      scope: meta.script.preamble.sap storage.type.sap
      set: [main|0, preamble|0, enum-defn|0]
    - match: 'return'
      scope: meta.script.preamble.sap keyword.return.sap
      set: [main|0, preamble|0, return-stmt|0]
    - match: 'if'
      scope: meta.script.preamble.sap meta.control-flow.if-stmt.sap keyword.if.sap
      set: [main|0, preamble|0, if-stmt|0]
    - match: 'else'
      scope: meta.script.preamble.sap meta.control-flow.else-stmt.sap keyword.else.sap
      set: [main|0, preamble|0, else-stmt|meta, block-stmt|0]
    - match: 'break'
      scope: meta.script.preamble.sap keyword.break.sap
      set: [main|0, preamble|0, break-stmt|0]
    - match: 'continue'
      scope: meta.script.preamble.sap keyword.continue.sap
      set: [main|0, preamble|0, continue-stmt|0]
    - match: 'import'
      scope: meta.script.preamble.sap keyword.import.sap
      set: [main|0, preamble|0, import-stmt|0]
    - match: 'using'
      scope: meta.script.preamble.sap keyword.using.sap
      set: [main|0, preamble|0, using-stmt|0]
    - match: 'namespace'
      scope: meta.script.preamble.sap meta.namespace-defn.sap keyword.sap
      set: [main|0, preamble|0, namespace-defn|0]
    - match: 'while'
      scope: meta.script.preamble.sap keyword.while.sap
      set: [main|0, preamble|0, while-loop|0]
    - match: 'for'
      scope: meta.script.preamble.sap keyword.for.sap
      set: [main|0, preamble|0, for-loop|0]
    - match: '(@\s*(?:layout|position|post|finalise|render))(?=\s+|\{)'
      scope: meta.script.preamble.sap
      captures:
        1: storage.modifier.sap
      set: [main|0, preamble|0, block-stmt|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: meta.script.preamble.sap constant.numeric.length.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: meta.script.preamble.sap constant.numeric.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: meta.script.preamble.sap constant.language.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: meta.script.preamble.sap string.quoted.double.sap punctuation.quote.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      scope: meta.script.preamble.sap
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: meta.script.preamble.sap punctuation.bracket.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: meta.script.preamble.sap punctuation.period.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      scope: meta.script.preamble.sap
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      scope: meta.script.preamble.sap
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: meta.script.preamble.sap string.quoted.single.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: meta.script.preamble.sap punctuation.brace.struct-start.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      scope: meta.script.preamble.sap
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: meta.script.preamble.sap keyword.cast.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: meta.script.preamble.sap support.type.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: meta.script.preamble.sap punctuation.paren.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: meta.script.preamble.sap keyword.operator.ellipsis.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: meta.script.preamble.sap keyword.operator.move.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: meta.script.preamble.sap keyword.operator.addr.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: meta.script.preamble.sap keyword.operator.plus.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: meta.script.preamble.sap keyword.operator.minus.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: meta.script.preamble.sap keyword.operator.not.sap
      set: [main|0, preamble|0, stmt|0, binop-expr2|0, unary-expr|0]
    - match: ';'
      scope: meta.script.preamble.sap punctuation.terminator.sap
      set: [main|0, preamble|0]
    - match: '\S'
      scope: invalid.illegal.sap
  # Rule: main
  main|0:
    - match: '(\\)(#)'
      scope: meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '(\\)(\\)'
      scope: meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '(\\)(\{)'
      scope: meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '(\\)(\})'
      scope: meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '(\\)(;)'
      scope: meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '\{'
      scope: meta.para.sap keyword.brace.sap
      push: paragraph|0
    - match: '(\\script)\s*(@\s*(layout|position|post|finalise|render))?\s*(\{)'
      scope: meta.para.sap meta.script.block.sap
      captures:
        1: keyword.block.script.sap
        2: storage.modifier.sap
        4: punctuation.brace.sap
      push: [paragraph|meta, script-block|0]
    - match: '(\\script)\s*(@\s*(layout|position|post|finalise|render))?\s*(::)?'
      scope: meta.para.sap meta.script.block.sap
      captures:
        1: keyword.block.script.sap
        2: storage.modifier.sap
        4: punctuation.scope.sap
      push: [paragraph|meta, script-block|1]
    - match: '\\'
      scope: meta.para.sap meta.script.inline-call.sap punctuation.misc.sap
      push: [paragraph|meta, script-call|0]
    - match: '(`{3,})(c)?(?!(\s+)([^`]*))?$\n?'
      scope: meta.para.sap
      captures:
        1: punctuation.other.sap
        2: constant.other.sap
      embed: scope:source.c
      escape: '(\1)'
      escape_captures:
        1: punctuation.other.sap
    - match: '(`{3,})(cpp)?(?!(\s+)([^`]*))?$\n?'
      scope: meta.para.sap
      captures:
        1: punctuation.other.sap
        2: constant.other.sap
      embed: scope:source.c++
      escape: '(\1)'
      escape_captures:
        1: punctuation.other.sap
    - match: '.*?'
      scope: meta.para.sap meta.para.text.sap
  # Rule: namespace-defn
  namespace-defn|0:
    - meta_content_scope: meta.namespace-defn.sap
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))?'
      scope: meta.namespace-defn.sap
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: namespace-defn|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: namespace-defn
  namespace-defn|1:
    - meta_content_scope: meta.namespace-defn.sap
    - match: '\{'
      scope: meta.namespace-defn.sap punctuation.brace.sap
      set: namespace-defn|2
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: namespace-defn
  namespace-defn|2:
    - meta_content_scope: meta.namespace-defn.sap
    - match: '(/#)'
      scope: meta.namespace-defn.sap comment.block.sap punctuation.definition.comment.sap
      push: [namespace-defn|meta, block-comment|0]
    - match: '(#+).*\n?'
      scope: meta.namespace-defn.sap comment.line.sap
      captures:
        1: punctuation.definition.comment.sap
    - match: 'fn'
      scope: meta.namespace-defn.sap storage.type.sap
      push: [namespace-defn|meta, func-defn|0]
    - match: '(global\s+)?(var|let)'
      scope: meta.namespace-defn.sap
      captures:
        1: storage.modifier.sap
        2: storage.type.sap
      push: [namespace-defn|meta, var-defn|0]
    - match: 'struct'
      scope: meta.namespace-defn.sap storage.type.sap
      push: [namespace-defn|meta, struct-defn|0]
    - match: 'enum'
      scope: meta.namespace-defn.sap storage.type.sap
      push: [namespace-defn|meta, enum-defn|0]
    - match: 'return'
      scope: meta.namespace-defn.sap keyword.return.sap
      push: [namespace-defn|meta, return-stmt|0]
    - match: 'if'
      scope: meta.namespace-defn.sap meta.control-flow.if-stmt.sap keyword.if.sap
      push: [namespace-defn|meta, if-stmt|0]
    - match: 'else'
      scope: meta.namespace-defn.sap meta.control-flow.else-stmt.sap keyword.else.sap
      push: [namespace-defn|meta, else-stmt|meta, block-stmt|0]
    - match: 'break'
      scope: meta.namespace-defn.sap keyword.break.sap
      push: [namespace-defn|meta, break-stmt|0]
    - match: 'continue'
      scope: meta.namespace-defn.sap keyword.continue.sap
      push: [namespace-defn|meta, continue-stmt|0]
    - match: 'import'
      scope: meta.namespace-defn.sap keyword.import.sap
      push: [namespace-defn|meta, import-stmt|0]
    - match: 'using'
      scope: meta.namespace-defn.sap keyword.using.sap
      push: [namespace-defn|meta, using-stmt|0]
    - match: 'namespace'
      scope: meta.namespace-defn.sap meta.namespace-defn.sap keyword.sap
      push: [namespace-defn|meta, namespace-defn|0]
    - match: 'while'
      scope: meta.namespace-defn.sap keyword.while.sap
      push: [namespace-defn|meta, while-loop|0]
    - match: 'for'
      scope: meta.namespace-defn.sap keyword.for.sap
      push: [namespace-defn|meta, for-loop|0]
    - match: '(@\s*(?:layout|position|post|finalise|render))(?=\s+|\{)'
      scope: meta.namespace-defn.sap
      captures:
        1: storage.modifier.sap
      push: [namespace-defn|meta, block-stmt|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: meta.namespace-defn.sap constant.numeric.length.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: meta.namespace-defn.sap constant.numeric.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: meta.namespace-defn.sap constant.language.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: meta.namespace-defn.sap string.quoted.double.sap punctuation.quote.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      scope: meta.namespace-defn.sap
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: meta.namespace-defn.sap punctuation.bracket.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: meta.namespace-defn.sap punctuation.period.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      scope: meta.namespace-defn.sap
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      scope: meta.namespace-defn.sap
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: meta.namespace-defn.sap string.quoted.single.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: meta.namespace-defn.sap punctuation.brace.struct-start.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      scope: meta.namespace-defn.sap
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: meta.namespace-defn.sap keyword.cast.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: meta.namespace-defn.sap support.type.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: meta.namespace-defn.sap punctuation.paren.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: meta.namespace-defn.sap keyword.operator.ellipsis.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: meta.namespace-defn.sap keyword.operator.move.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: meta.namespace-defn.sap keyword.operator.addr.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: meta.namespace-defn.sap keyword.operator.plus.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: meta.namespace-defn.sap keyword.operator.minus.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: meta.namespace-defn.sap keyword.operator.not.sap
      push: [namespace-defn|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: ';'
      scope: meta.namespace-defn.sap punctuation.terminator.sap
    - match: '\}'
      scope: meta.namespace-defn.sap punctuation.brace.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Meta scope context for namespace-defn
  namespace-defn|meta:
    - meta_content_scope: meta.namespace-defn.sap
    - match: ''
      pop: true
  # Rule: paragraph
  paragraph|0:
    - meta_content_scope: meta.para.sap
    - match: '(\\)(#)'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '(\\)(\\)'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '(\\)(\{)'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '(\\)(\})'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '(\\)(;)'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
    - match: '\{'
      scope: meta.para.sap meta.para.sap keyword.brace.sap
      push: [paragraph|meta, paragraph|0]
    - match: '(\\script)\s*(@\s*(layout|position|post|finalise|render))?\s*(\{)'
      scope: meta.para.sap meta.para.sap meta.script.block.sap
      captures:
        1: keyword.block.script.sap
        2: storage.modifier.sap
        4: punctuation.brace.sap
      push: [paragraph|meta, paragraph|meta, script-block|0]
    - match: '(\\script)\s*(@\s*(layout|position|post|finalise|render))?\s*(::)?'
      scope: meta.para.sap meta.para.sap meta.script.block.sap
      captures:
        1: keyword.block.script.sap
        2: storage.modifier.sap
        4: punctuation.scope.sap
      push: [paragraph|meta, paragraph|meta, script-block|1]
    - match: '\\'
      scope: meta.para.sap meta.para.sap meta.script.inline-call.sap punctuation.misc.sap
      push: [paragraph|meta, paragraph|meta, script-call|0]
    - match: '(`{3,})(c)?(?!(\s+)([^`]*))?$\n?'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.other.sap
        2: constant.other.sap
      embed: scope:source.c
      escape: '(\1)'
      escape_captures:
        1: punctuation.other.sap
    - match: '(`{3,})(cpp)?(?!(\s+)([^`]*))?$\n?'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.other.sap
        2: constant.other.sap
      embed: scope:source.c++
      escape: '(\1)'
      escape_captures:
        1: punctuation.other.sap
    - match: '.*?'
      scope: meta.para.sap meta.para.sap meta.para.text.sap
    - match: '\}'
      scope: meta.para.sap keyword.brace.sap
      pop: true
    - match: '(?=\S)'
      set: paragraph|1
  # Rule: paragraph
  paragraph|1:
    - meta_content_scope: meta.para.sap
    - match: '(\\)(#)'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
      set: paragraph|0
    - match: '(\\)(\\)'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
      set: paragraph|0
    - match: '(\\)(\{)'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
      set: paragraph|0
    - match: '(\\)(\})'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
      set: paragraph|0
    - match: '(\\)(;)'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.escape.sap
      set: paragraph|0
    - match: '\{'
      scope: meta.para.sap meta.para.sap keyword.brace.sap
      set: [paragraph|0, paragraph|meta, paragraph|0]
    - match: '(\\script)\s*(@\s*(layout|position|post|finalise|render))?\s*(\{)'
      scope: meta.para.sap meta.para.sap meta.script.block.sap
      captures:
        1: keyword.block.script.sap
        2: storage.modifier.sap
        4: punctuation.brace.sap
      set: [paragraph|0, paragraph|meta, paragraph|meta, script-block|0]
    - match: '(\\script)\s*(@\s*(layout|position|post|finalise|render))?\s*(::)?'
      scope: meta.para.sap meta.para.sap meta.script.block.sap
      captures:
        1: keyword.block.script.sap
        2: storage.modifier.sap
        4: punctuation.scope.sap
      set: [paragraph|0, paragraph|meta, paragraph|meta, script-block|1]
    - match: '\\'
      scope: meta.para.sap meta.para.sap meta.script.inline-call.sap punctuation.misc.sap
      set: [paragraph|0, paragraph|meta, paragraph|meta, script-call|0]
    - match: '(`{3,})(c)?(?!(\s+)([^`]*))?$\n?'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.other.sap
        2: constant.other.sap
      set: [paragraph|0, paragraph|2]
    - match: '(`{3,})(cpp)?(?!(\s+)([^`]*))?$\n?'
      scope: meta.para.sap meta.para.sap
      captures:
        1: punctuation.other.sap
        2: constant.other.sap
      set: [paragraph|0, paragraph|3]
    - match: '.*?'
      scope: meta.para.sap meta.para.sap meta.para.text.sap
      set: paragraph|0
  paragraph|2:
    - match: ''
      embed: scope:source.c
      escape: '(\1)'
      escape_captures:
        1: punctuation.other.sap
      pop: true
  paragraph|3:
    - match: ''
      embed: scope:source.c++
      escape: '(\1)'
      escape_captures:
        1: punctuation.other.sap
      pop: true
  # Meta scope context for paragraph
  paragraph|meta:
    - meta_content_scope: meta.para.sap
    - match: ''
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|0:
    - match: '([A-Za-z_][[:word:]]*)\s*(:)\s*(?!:)'
      captures:
        1: variable.parameter.sap
        2: punctuation.colon.sap
      push: [postfix-expr2|1, binop-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      push: [postfix-expr2|1, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      push: [postfix-expr2|1, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      push: [postfix-expr2|1, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      push: [postfix-expr2|1, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      push: [postfix-expr2|1, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      push: [postfix-expr2|1, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      push: [postfix-expr2|1, binop-expr2|0, unary-expr|0]
    - match: '\)'
      scope: punctuation.paren.call-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|1:
    - match: ','
      scope: punctuation.comma.sap
      pop: true
    - match: '(?=\S)'
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|2:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [postfix-expr2|3, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [postfix-expr2|3, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [postfix-expr2|3, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [postfix-expr2|3, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [postfix-expr2|3, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [postfix-expr2|3, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [postfix-expr2|3, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|3:
    - match: ':'
      scope: punctuation.colon.slice.sap
      set: postfix-expr2|4
    - match: ','
      scope: punctuation.comma.sap
      set: [postfix-expr2|6, binop-expr|0]
    - match: '\]'
      scope: punctuation.bracket.subscript-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|4:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [postfix-expr2|5, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [postfix-expr2|5, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [postfix-expr2|5, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [postfix-expr2|5, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [postfix-expr2|5, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [postfix-expr2|5, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [postfix-expr2|5, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|5:
    - match: '\]'
      scope: punctuation.bracket.subscript-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|6:
    - match: ','
      scope: punctuation.comma.sap
      push: binop-expr|0
    - match: '\]'
      scope: punctuation.bracket.subscript-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|7:
    - match: '[A-Za-z_][A-Za-z0-9_]*'
      scope: meta.name.struct.field.sap
      set: [postfix-expr2|8, struct-literal-field-list|0, struct-literal-field-list|1, struct-literal-field|0]
    - match: '\}'
      scope: punctuation.brace.struct-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|8:
    - match: '\}'
      scope: punctuation.brace.struct-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr2
  postfix-expr2|9:
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.field.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr
  postfix-expr|0:
    - match: '\s*'
      set: postfix-expr|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: postfix-expr
  postfix-expr|1:
    - match: '\('
      scope: punctuation.paren.call-start.sap
      push: postfix-expr2|0
    - match: '\['
      scope: punctuation.bracket.subscript-start.sap
      push: postfix-expr2|2
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      push: postfix-expr2|7
    - match: '!'
      scope: keyword.operator.deref.sap
    - match: '\?(?!\?)'
      scope: keyword.operator.qn.sap
    - match: '\.'
      scope: punctuation.operator.dot.sap
      push: postfix-expr2|9
    - match: '(?=\S)'
      pop: true
  # Rule: preamble
  preamble|0:
    - meta_content_scope: meta.script.preamble.sap
    - match: '(/#)'
      scope: meta.script.preamble.sap comment.block.sap punctuation.definition.comment.sap
      push: [preamble|meta, block-comment|0]
    - match: '(#+).*\n?'
      scope: meta.script.preamble.sap comment.line.sap
      captures:
        1: punctuation.definition.comment.sap
    - match: 'fn'
      scope: meta.script.preamble.sap storage.type.sap
      push: [preamble|meta, func-defn|0]
    - match: '(global\s+)?(var|let)'
      scope: meta.script.preamble.sap
      captures:
        1: storage.modifier.sap
        2: storage.type.sap
      push: [preamble|meta, var-defn|0]
    - match: 'struct'
      scope: meta.script.preamble.sap storage.type.sap
      push: [preamble|meta, struct-defn|0]
    - match: 'enum'
      scope: meta.script.preamble.sap storage.type.sap
      push: [preamble|meta, enum-defn|0]
    - match: 'return'
      scope: meta.script.preamble.sap keyword.return.sap
      push: [preamble|meta, return-stmt|0]
    - match: 'if'
      scope: meta.script.preamble.sap meta.control-flow.if-stmt.sap keyword.if.sap
      push: [preamble|meta, if-stmt|0]
    - match: 'else'
      scope: meta.script.preamble.sap meta.control-flow.else-stmt.sap keyword.else.sap
      push: [preamble|meta, else-stmt|meta, block-stmt|0]
    - match: 'break'
      scope: meta.script.preamble.sap keyword.break.sap
      push: [preamble|meta, break-stmt|0]
    - match: 'continue'
      scope: meta.script.preamble.sap keyword.continue.sap
      push: [preamble|meta, continue-stmt|0]
    - match: 'import'
      scope: meta.script.preamble.sap keyword.import.sap
      push: [preamble|meta, import-stmt|0]
    - match: 'using'
      scope: meta.script.preamble.sap keyword.using.sap
      push: [preamble|meta, using-stmt|0]
    - match: 'namespace'
      scope: meta.script.preamble.sap meta.namespace-defn.sap keyword.sap
      push: [preamble|meta, namespace-defn|0]
    - match: 'while'
      scope: meta.script.preamble.sap keyword.while.sap
      push: [preamble|meta, while-loop|0]
    - match: 'for'
      scope: meta.script.preamble.sap keyword.for.sap
      push: [preamble|meta, for-loop|0]
    - match: '(@\s*(?:layout|position|post|finalise|render))(?=\s+|\{)'
      scope: meta.script.preamble.sap
      captures:
        1: storage.modifier.sap
      push: [preamble|meta, block-stmt|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: meta.script.preamble.sap constant.numeric.length.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: meta.script.preamble.sap constant.numeric.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: meta.script.preamble.sap constant.language.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: meta.script.preamble.sap string.quoted.double.sap punctuation.quote.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      scope: meta.script.preamble.sap
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: meta.script.preamble.sap punctuation.bracket.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: meta.script.preamble.sap punctuation.period.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      scope: meta.script.preamble.sap
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      scope: meta.script.preamble.sap
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: meta.script.preamble.sap string.quoted.single.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: meta.script.preamble.sap punctuation.brace.struct-start.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      scope: meta.script.preamble.sap
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: meta.script.preamble.sap keyword.cast.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: meta.script.preamble.sap support.type.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: meta.script.preamble.sap punctuation.paren.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: meta.script.preamble.sap keyword.operator.ellipsis.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: meta.script.preamble.sap keyword.operator.move.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: meta.script.preamble.sap keyword.operator.addr.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: meta.script.preamble.sap keyword.operator.plus.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: meta.script.preamble.sap keyword.operator.minus.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: meta.script.preamble.sap keyword.operator.not.sap
      push: [preamble|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: ';'
      scope: meta.script.preamble.sap punctuation.terminator.sap
    - match: '\\start_document'
      scope: meta.script.preamble.sap keyword.sap
      set: [preamble|meta, document-start|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Meta scope context for preamble
  preamble|meta:
    - meta_content_scope: meta.script.preamble.sap
    - match: ''
      pop: true
  # Rule: primary-expr
  primary-expr|0:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [primary-expr|1, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [primary-expr|1, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [primary-expr|1, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [primary-expr|1, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [primary-expr|1, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [primary-expr|1, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [primary-expr|1, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: primary-expr
  primary-expr|1:
    - match: '\)'
      scope: punctuation.paren.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: prototype
  prototype:
    - match: '(/#)'
      scope: comment.block.sap punctuation.definition.comment.sap
      push: block-comment|0
    - match: '(#+).*\n?'
      scope: comment.line.sap
      captures:
        1: punctuation.definition.comment.sap
  # Rule: return-stmt
  return-stmt|0:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [return-stmt|1, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [return-stmt|1, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [return-stmt|1, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [return-stmt|1, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [return-stmt|1, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [return-stmt|1, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [return-stmt|1, binop-expr2|0, unary-expr|0]
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: return-stmt
  return-stmt|1:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: script-block
  script-block|0:
    - meta_content_scope: meta.script.block.sap
    - match: '(/#)'
      scope: meta.script.block.sap comment.block.sap punctuation.definition.comment.sap
      push: [script-block|meta, block-comment|0]
    - match: '(#+).*\n?'
      scope: meta.script.block.sap comment.line.sap
      captures:
        1: punctuation.definition.comment.sap
    - match: 'fn'
      scope: meta.script.block.sap storage.type.sap
      push: [script-block|meta, func-defn|0]
    - match: '(global\s+)?(var|let)'
      scope: meta.script.block.sap
      captures:
        1: storage.modifier.sap
        2: storage.type.sap
      push: [script-block|meta, var-defn|0]
    - match: 'struct'
      scope: meta.script.block.sap storage.type.sap
      push: [script-block|meta, struct-defn|0]
    - match: 'enum'
      scope: meta.script.block.sap storage.type.sap
      push: [script-block|meta, enum-defn|0]
    - match: 'return'
      scope: meta.script.block.sap keyword.return.sap
      push: [script-block|meta, return-stmt|0]
    - match: 'if'
      scope: meta.script.block.sap meta.control-flow.if-stmt.sap keyword.if.sap
      push: [script-block|meta, if-stmt|0]
    - match: 'else'
      scope: meta.script.block.sap meta.control-flow.else-stmt.sap keyword.else.sap
      push: [script-block|meta, else-stmt|meta, block-stmt|0]
    - match: 'break'
      scope: meta.script.block.sap keyword.break.sap
      push: [script-block|meta, break-stmt|0]
    - match: 'continue'
      scope: meta.script.block.sap keyword.continue.sap
      push: [script-block|meta, continue-stmt|0]
    - match: 'import'
      scope: meta.script.block.sap keyword.import.sap
      push: [script-block|meta, import-stmt|0]
    - match: 'using'
      scope: meta.script.block.sap keyword.using.sap
      push: [script-block|meta, using-stmt|0]
    - match: 'namespace'
      scope: meta.script.block.sap meta.namespace-defn.sap keyword.sap
      push: [script-block|meta, namespace-defn|0]
    - match: 'while'
      scope: meta.script.block.sap keyword.while.sap
      push: [script-block|meta, while-loop|0]
    - match: 'for'
      scope: meta.script.block.sap keyword.for.sap
      push: [script-block|meta, for-loop|0]
    - match: '(@\s*(?:layout|position|post|finalise|render))(?=\s+|\{)'
      scope: meta.script.block.sap
      captures:
        1: storage.modifier.sap
      push: [script-block|meta, block-stmt|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: meta.script.block.sap constant.numeric.length.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: meta.script.block.sap constant.numeric.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: meta.script.block.sap constant.language.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: meta.script.block.sap string.quoted.double.sap punctuation.quote.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      scope: meta.script.block.sap
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: meta.script.block.sap punctuation.bracket.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: meta.script.block.sap punctuation.period.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      scope: meta.script.block.sap
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      scope: meta.script.block.sap
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: meta.script.block.sap string.quoted.single.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: meta.script.block.sap punctuation.brace.struct-start.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      scope: meta.script.block.sap
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: meta.script.block.sap keyword.cast.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: meta.script.block.sap support.type.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: meta.script.block.sap punctuation.paren.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: meta.script.block.sap keyword.operator.ellipsis.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: meta.script.block.sap keyword.operator.move.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: meta.script.block.sap keyword.operator.addr.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: meta.script.block.sap keyword.operator.plus.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: meta.script.block.sap keyword.operator.minus.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: meta.script.block.sap keyword.operator.not.sap
      push: [script-block|meta, stmt|0, binop-expr2|0, unary-expr|0]
    - match: ';'
      scope: meta.script.block.sap punctuation.terminator.sap
    - match: '\}'
      scope: meta.script.block.sap punctuation.brace.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: script-block
  script-block|1:
    - meta_content_scope: meta.script.block.sap
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.script.block.sap entity.name.namespace.sap
      push: script-block|2
    - match: '\s*(\{)'
      scope: meta.script.block.sap
      captures:
        1: punctuation.brace.sap
      set: script-block|0
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: script-block
  script-block|2:
    - meta_content_scope: meta.script.block.sap
    - match: '(::)'
      scope: meta.script.block.sap punctuation.scope.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Meta scope context for script-block
  script-block|meta:
    - meta_content_scope: meta.script.block.sap
    - match: ''
      pop: true
  # Rule: script-call-tail
  script-call-tail|0:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '(?=\S)'
      pop: true
  # Rule: script-call
  script-call|0:
    - meta_content_scope: meta.script.inline-call.sap
    - match: '::'
      scope: meta.script.inline-call.sap punctuation.scope.sap
      set: script-call|1
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.script.inline-call.sap support.function.sap
      set: script-call|2
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: script-call
  script-call|1:
    - meta_content_scope: meta.script.inline-call.sap
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.script.inline-call.sap support.function.sap
      set: script-call|2
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: script-call
  script-call|2:
    - meta_content_scope: meta.script.inline-call.sap
    - match: '::'
      scope: meta.script.inline-call.sap punctuation.scope.sap
      push: script-call|3
    - match: '(@\s*(layout|position|post|finalise|render))'
      scope: meta.script.inline-call.sap storage.modifier.sap
      set: script-call|4
    - match: '\('
      scope: meta.script.inline-call.sap punctuation.paren.call-start.sap
      set: script-call|5
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: script-call
  script-call|3:
    - meta_content_scope: meta.script.inline-call.sap
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.script.inline-call.sap support.function.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: script-call
  script-call|4:
    - meta_content_scope: meta.script.inline-call.sap
    - match: '\('
      scope: meta.script.inline-call.sap punctuation.paren.call-start.sap
      set: script-call|5
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: script-call
  script-call|5:
    - meta_content_scope: meta.script.inline-call.sap
    - match: '([A-Za-z_][[:word:]]*)\s*(:)\s*(?!:)'
      scope: meta.script.inline-call.sap
      captures:
        1: variable.parameter.sap
        2: punctuation.colon.sap
      push: [script-call|6, binop-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: meta.script.inline-call.sap constant.numeric.length.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: meta.script.inline-call.sap constant.numeric.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: meta.script.inline-call.sap constant.language.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: meta.script.inline-call.sap string.quoted.double.sap punctuation.quote.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      scope: meta.script.inline-call.sap
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: meta.script.inline-call.sap punctuation.bracket.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: meta.script.inline-call.sap punctuation.period.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      scope: meta.script.inline-call.sap
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      scope: meta.script.inline-call.sap
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: meta.script.inline-call.sap string.quoted.single.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: meta.script.inline-call.sap punctuation.brace.struct-start.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      scope: meta.script.inline-call.sap
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: meta.script.inline-call.sap keyword.cast.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: meta.script.inline-call.sap support.type.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: meta.script.inline-call.sap punctuation.paren.sap
      push: [script-call|6, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: meta.script.inline-call.sap keyword.operator.ellipsis.sap
      push: [script-call|6, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: meta.script.inline-call.sap keyword.operator.move.sap
      push: [script-call|6, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: meta.script.inline-call.sap keyword.operator.addr.sap
      push: [script-call|6, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: meta.script.inline-call.sap keyword.operator.plus.sap
      push: [script-call|6, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: meta.script.inline-call.sap keyword.operator.minus.sap
      push: [script-call|6, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: meta.script.inline-call.sap keyword.operator.not.sap
      push: [script-call|6, binop-expr2|0, unary-expr|0]
    - match: '\)'
      scope: meta.script.inline-call.sap punctuation.paren.call-end.sap
      set: [script-call|meta, script-call-tail|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: script-call
  script-call|6:
    - meta_content_scope: meta.script.inline-call.sap
    - match: ','
      scope: meta.script.inline-call.sap punctuation.comma.sap
      pop: true
    - match: '(?=\S)'
      pop: true
  # Meta scope context for script-call
  script-call|meta:
    - meta_content_scope: meta.script.inline-call.sap
    - match: ''
      pop: true
  # Rule: stmt
  stmt|0:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: string-literal
  string-literal|0:
    - meta_content_scope: string.quoted.double.sap
    - meta_include_prototype: false
    - match: '\\\{|\\\}|\\\\|\\n|\\t|\\b|\\"|\\'''
      scope: string.quoted.double.sap constant.character.escape.sap
    - match: '\\x[[:xdigit:]]{2}'
      scope: string.quoted.double.sap constant.character.escape.sap
    - match: '\\u[[:xdigit:]]{4}'
      scope: string.quoted.double.sap constant.character.escape.sap
    - match: '\\U[[:xdigit:]]{8}'
      scope: string.quoted.double.sap constant.character.escape.sap
    - match: '[^"]'
      scope: string.quoted.double.sap
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-defn
  struct-defn|0:
    - match: '[A-Za-z_][[:word:]]*'
      scope: entity.name.struct.sap
      set: struct-defn|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-defn
  struct-defn|1:
    - match: '\{'
      scope: punctuation.brace.sap
      set: struct-defn|2
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-defn
  struct-defn|2:
    - match: '[A-Za-z_][[:word:]]*'
      scope: entity.name.struct-field.sap
      push: struct-field-defn|0
    - match: '\}'
      scope: punctuation.brace.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-field-defn
  struct-field-defn|0:
    - match: ':'
      scope: punctuation.colon.sap
      set: struct-field-defn|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-field-defn
  struct-field-defn|1:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: struct-field-defn|2
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: struct-field-defn|2
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [struct-field-defn|2, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [struct-field-defn|2, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: struct-field-defn|2
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [struct-field-defn|2, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [struct-field-defn|2, type|5]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-field-defn
  struct-field-defn|2:
    - match: '='
      scope: keyword.operator.sap
      set: struct-field-defn|3
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-field-defn
  struct-field-defn|3:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [struct-field-defn|4, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [struct-field-defn|4, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [struct-field-defn|4, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [struct-field-defn|4, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [struct-field-defn|4, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [struct-field-defn|4, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [struct-field-defn|4, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-field-defn
  struct-field-defn|4:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-literal-field-list
  struct-literal-field-list|0:
    - match: '[A-Za-z_][A-Za-z0-9_]*'
      scope: meta.name.struct.field.sap
      push: [struct-literal-field-list|1, struct-literal-field|0]
    - match: '(?=\S)'
      pop: true
  # Rule: struct-literal-field-list
  struct-literal-field-list|1:
    - match: ','
      scope: punctuation.comma.sap
      pop: true
    - match: '(?=\S)'
      pop: true
  # Rule: struct-literal-field
  struct-literal-field|0:
    - match: ':'
      scope: punctuation.colon.sap
      set: binop-expr|0
    - match: '(?=\S)'
      pop: true
  # Rule: struct-literal
  struct-literal|0:
    - match: '[A-Za-z_][A-Za-z0-9_]*'
      scope: meta.name.struct.field.sap
      set: [struct-literal|1, struct-literal-field-list|0, struct-literal-field-list|1, struct-literal-field|0]
    - match: '\}'
      scope: punctuation.brace.struct-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: struct-literal
  struct-literal|1:
    - match: '\}'
      scope: punctuation.brace.struct-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: text-literal
  text-literal|0:
    - match: '\\'
      scope: meta.script.inline-call.sap punctuation.misc.sap
      push: script-call|0
    - match: '(`{3,})(c)?(?!(\s+)([^`]*))?$\n?'
      captures:
        1: punctuation.other.sap
        2: constant.other.sap
      embed: scope:source.c
      escape: '(\1)'
      escape_captures:
        1: punctuation.other.sap
    - match: '(`{3,})(cpp)?(?!(\s+)([^`]*))?$\n?'
      captures:
        1: punctuation.other.sap
        2: constant.other.sap
      embed: scope:source.c++
      escape: '(\1)'
      escape_captures:
        1: punctuation.other.sap
    - match: '[^}]'
    - match: '\}'
      scope: punctuation.brace.sap
      pop: true
    - match: '(?=\S)'
      set: text-literal|1
  # Rule: text-literal
  text-literal|1:
    - match: '\}'
      scope: punctuation.brace.sap
      pop: true
  # Rule: type
  type|0:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      pop: true
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      pop: true
    - match: '\?'
      scope: keyword.operator.type.sap
      set: type|0
    - match: '&'
      scope: keyword.operator.type.sap
      set: type|1
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      pop: true
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: type|2
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: type|5
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: type
  type|1:
    - match: 'mut'
      scope: storage.modifier.mut.sap
      set: type|0
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      pop: true
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      pop: true
    - match: '\?'
      scope: keyword.operator.type.sap
      set: type|0
    - match: '&'
      scope: keyword.operator.type.sap
      set: type|1
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      pop: true
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: type|2
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: type|5
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: type
  type|2:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: type|3
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: type|3
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [type|3, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [type|3, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: type|3
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [type|3, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [type|3, type|5]
    - match: ','
      scope: punctuation.comma.sap
      set: [type|3, type|0]
    - match: '\)'
      scope: punctuation.paren.fn-type-start.sap
      set: type|4
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: type
  type|3:
    - match: ','
      scope: punctuation.comma.sap
      push: type|0
    - match: '\)'
      scope: punctuation.paren.fn-type-start.sap
      set: type|4
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: type
  type|4:
    - match: '->'
      scope: punctuation.arrow.sap
      set: type|0
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: type
  type|5:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: type|6
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: type|6
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [type|6, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [type|6, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: type|6
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [type|6, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [type|6, type|5]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: type
  type|6:
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: type|7
    - match: '\]'
      scope: punctuation.bracket.array-type-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: type
  type|7:
    - match: '\]'
      scope: punctuation.bracket.array-type-end.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: unary-expr
  unary-expr|0:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: postfix-expr|0
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: postfix-expr|0
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: postfix-expr|0
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: postfix-expr|0
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: postfix-expr|0
    - match: 'cast'
      scope: keyword.cast.sap
      set: [postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: unary-expr|0
    - match: '\*'
      scope: keyword.operator.move.sap
      set: unary-expr|0
    - match: '&'
      scope: keyword.operator.addr.sap
      set: unary-expr|1
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: unary-expr|0
    - match: '-'
      scope: keyword.operator.minus.sap
      set: unary-expr|0
    - match: 'not'
      scope: keyword.operator.not.sap
      set: unary-expr|0
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: unary-expr
  unary-expr|1:
    - match: 'mut'
      scope: storage.modifier.mut.sap
      set: unary-expr|0
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: postfix-expr|0
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: postfix-expr|0
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: postfix-expr|0
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: postfix-expr|0
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: postfix-expr|0
    - match: 'cast'
      scope: keyword.cast.sap
      set: [postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: unary-expr|0
    - match: '\*'
      scope: keyword.operator.move.sap
      set: unary-expr|0
    - match: '&'
      scope: keyword.operator.addr.sap
      set: unary-expr|1
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: unary-expr|0
    - match: '-'
      scope: keyword.operator.minus.sap
      set: unary-expr|0
    - match: 'not'
      scope: keyword.operator.not.sap
      set: unary-expr|0
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: using-stmt
  using-stmt|0:
    - match: '::'
      scope: punctuation.scope.sap
      set: using-stmt|1
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.namespace.sap
      set: using-stmt|2
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: using-stmt
  using-stmt|1:
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.namespace.sap
      set: using-stmt|2
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: using-stmt
  using-stmt|2:
    - match: '::'
      scope: punctuation.scope.sap
      push: using-stmt|3
    - match: '='
      scope: punctuation.equal.sap
      set: using-stmt|4
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: using-stmt
  using-stmt|3:
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.namespace.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: using-stmt
  using-stmt|4:
    - match: '::'
      scope: punctuation.scope.sap
      set: using-stmt|5
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.namespace.sap
      set: using-stmt|6
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: using-stmt
  using-stmt|5:
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.namespace.sap
      set: using-stmt|6
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: using-stmt
  using-stmt|6:
    - match: '::'
      scope: punctuation.scope.sap
      push: using-stmt|3
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: var-defn
  var-defn|0:
    - match: '[A-Za-z_][[:word:]]*'
      scope: meta.name.variable.sap
      set: var-defn|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: var-defn
  var-defn|1:
    - match: ':'
      scope: punctuation.colon.sap
      set: var-defn|2
    - match: '='
      scope: keyword.operator.sap
      set: var-defn|4
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: var-defn
  var-defn|2:
    - match: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length)\b'
      scope: support.type.builtin.sap
      set: var-defn|3
    - match: '(builtin::)?Position|AbsPosition|Colour|ColourRGB|ColourCMYK'
      scope: support.type.builtin.sap
      set: var-defn|3
    - match: '\?'
      scope: keyword.operator.type.sap
      set: [var-defn|3, type|0]
    - match: '&'
      scope: keyword.operator.type.sap
      set: [var-defn|3, type|1]
    - match: '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: meta.name.scope-part.sap
        2: punctuation.scope.sap
        3: meta.name.scope-part.sap
      set: var-defn|3
    - match: '\('
      scope: punctuation.paren.fn-type-start.sap
      set: [var-defn|3, type|2]
    - match: '\['
      scope: punctuation.bracket.array-type-start.sap
      set: [var-defn|3, type|5]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: var-defn
  var-defn|3:
    - match: '='
      scope: keyword.operator.sap
      set: var-defn|4
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: var-defn
  var-defn|4:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [var-defn|5, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [var-defn|5, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [var-defn|5, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [var-defn|5, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [var-defn|5, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [var-defn|5, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [var-defn|5, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: var-defn
  var-defn|5:
    - match: ';'
      scope: punctuation.terminator.sap
      pop: true
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: while-loop
  while-loop|0:
    - match: '\('
      scope: punctuation.paren.while-start.sap
      set: while-loop|1
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: while-loop
  while-loop|1:
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'
      scope: constant.numeric.length.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0]
    - match: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'
      scope: constant.numeric.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0]
    - match: '\b(true|false|null)\b'
      scope: constant.language.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0]
    - match: '"'
      scope: string.quoted.double.sap punctuation.quote.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, string-literal|0]
    - match: '(f)(")'
      captures:
        1: storage.type.string.sap
        2: punctuation.quote.fstring-start.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, fstring-literal|0]
    - match: '\['
      scope: punctuation.bracket.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, array-literal|0]
    - match: '\.(?!\.)'
      scope: punctuation.period.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, enum-literal|0]
    - match: '(\\(box|vbox|hbox|zbox|line|para))\s*(\{)'
      captures:
        1: keyword.block.text.sap
        3: punctuation.brace.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '(\\)\s*(\{)'
      captures:
        1: keyword.inline.text.sap
        2: punctuation.brace.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, text-literal|0]
    - match: '''.*?'''
      scope: string.quoted.single.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0]
    - match: '\{'
      scope: punctuation.brace.struct-start.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, struct-literal|0]
    - match: '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'
      captures:
        1: punctuation.scope.sap
        2: variable.other.sap
        3: punctuation.scope.sap
        4: variable.other.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0]
    - match: 'cast'
      scope: keyword.cast.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, cast-expr|0]
    - match: '\$'
      scope: support.type.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, type|0]
    - match: '\('
      scope: punctuation.paren.sap
      set: [while-loop|2, binop-expr2|0, postfix-expr|0, primary-expr|0]
    - match: '\.\.\.'
      scope: keyword.operator.ellipsis.sap
      set: [while-loop|2, binop-expr2|0, unary-expr|0]
    - match: '\*'
      scope: keyword.operator.move.sap
      set: [while-loop|2, binop-expr2|0, unary-expr|0]
    - match: '&'
      scope: keyword.operator.addr.sap
      set: [while-loop|2, binop-expr2|0, unary-expr|1]
    - match: '\+'
      scope: keyword.operator.plus.sap
      set: [while-loop|2, binop-expr2|0, unary-expr|0]
    - match: '-'
      scope: keyword.operator.minus.sap
      set: [while-loop|2, binop-expr2|0, unary-expr|0]
    - match: 'not'
      scope: keyword.operator.not.sap
      set: [while-loop|2, binop-expr2|0, unary-expr|0]
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
  # Rule: while-loop
  while-loop|2:
    - match: '\)'
      scope: punctuation.paren.while-end.sap
      set: block-stmt|0
    - match: '\S'
      scope: invalid.illegal.sap
      pop: true
