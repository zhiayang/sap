# SBNF file for sap.
# needs to be compiled to a sublime-syntax file using https://github.com/BenjaminSchaaf/sbnf
# this works with version 0.6.0 (released 2022-11-22)

NAME = 'sap'
EXTENSIONS = 'sap'

IDENTIFIER = '[A-Za-z_][[:word:]]*'

prototype: (~(block-comment | line-comment))*;

line-comment: '(#+).*\n?'{
    comment.line,
    1: punctuation.definition.comment
};

block-comment {comment.block} :
    '(#/)'{punctuation.definition.comment}
     (block-comment | '(?!/#).')*
    ~'(/#)'{punctuation.definition.comment}
    ;

main: preamble paragraph*;

preamble{meta.document.preamble}
    : stmt stmt* document-start
    ;

document-start
    : `\start_document`{keyword} (`(`{punctuation.paren.call-start}
        (function-call-arg (`,`{punctuation.comma} function-call-arg)* (`,`{punctuation.comma})?)?
    `)`{punctuation.paren.call-end}) `;`{punctuation.terminator}?
    ;


paragraph{meta.para.contents}
    : special-token-escape
    | block-comment
    | line-comment
    | `{`{keyword.brace} paragraph* `}`{keyword.brace}
    | ~(script-block | script-call)
    | '\w*'
    ;

special-token-escape
    : '(\\)(\#)'{1: punctuation.escape}
    | '(\\)(\\)'{1: punctuation.escape}
    | '(\\)(\{)'{1: punctuation.escape}
    | '(\\)(\})'{1: punctuation.escape}
    | '(\\)(;)'{1: punctuation.escape}
    ;



script-call{meta.script.inline-call}:
    `\`{punctuation.misc} (
        (`::`{punctuation.scope})? (IDENTIFIER{support.function})
        (`::`{punctuation.scope} IDENTIFIER{support.function})*
    ) '(@\s*(layout|position|post|render))'{storage.modifier}? (`(`{punctuation.paren.call-start}
            (function-call-arg (`,`{punctuation.comma})?)*
    `)`{punctuation.paren.call-end})
    script-call-tail?;

script-call-tail
    : `;`{punctuation.terminator}
    | '\s*(\\(?:p|t))?\s*(\{)'{1: keyword.script.trailing-block, 2: punctuation.brace.block-start}
      paragraph*
      `}`{punctuation.brace.block-end}
    ;


script-block:
    ( '(\\script)\s*(@\s*(layout|position|post|render))?\s*(\{)'{1: keyword.block.script, 2: storage.modifier, 4: punctuation.brace}
    | '(\\script)\s*(@\s*(layout|position|post|render))?\s*(::)?'{1: keyword.block.script, 2: storage.modifier, 4: punctuation.scope}
      (IDENTIFIER{entity.name.namespace} '(::)'{punctuation.scope})*
      '\s*(\{)'{1:punctuation.brace}
    ) stmt* `}`{punctuation.brace}
    ;


var-defn:
    '(global\s+)?(var|let)'{1: storage.modifier, 2: storage.type}
    IDENTIFIER{meta.name.variable}
    (':'{punctuation.colon} type)?
    ('='{keyword.operator} expr)?
    (`;`{punctuation.terminator})
    ;

func-defn:
    'fn'{storage.type}
    IDENTIFIER{entity.name.function}
    `(`{punctuation.paren.params-start}
        (IDENTIFIER{variable.parameter} `:`{punctuation.colon} type (`=`{punctuation.equal} expr)?)?
        (`,`{punctuation.comma} IDENTIFIER{variable.parameter} `:`{punctuation.colon} type (`=`{punctuation.equal} expr)?)*
    `)`{punctuation.parenparams-end}
    (`->`{punctuation.arrow} type)?
    `{`{punctuation.brace}
        stmt*
    `}`{punctuation.brace}
    ;

struct-field-defn: IDENTIFIER{entity.name.struct-field} `:`{punctuation.colon} type
    (`=`{keyword.operator} expr)? `;`{punctuation.terminator}
    ;

struct-defn: 'struct'{storage.type} IDENTIFIER{entity.name.struct}
    `{`{punctuation.brace}
        struct-field-defn*
    `}`{punctuation.brace}
    ;


enum-enumerator-defn: IDENTIFIER{entity.name.enum-enumerator}
    (`=`{keyword.operator} expr)? `;`{punctuation.terminator}
    ;

enum-defn: 'enum'{storage.type} IDENTIFIER{entity.name.enum} (`:`{punctuation.colon} type)?
    `{`{punctuation.brace}
        enum-enumerator-defn*
    `}`{punctuation.brace}
    ;

namespace-defn{meta.namespace-defn}: `namespace`{keyword} '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))?'{
        1: meta.name.scope-part,
        2: punctuation.scope,
        3: meta.name.scope-part
    }(`{`{punctuation.brace}
        stmt*
    `}`{punctuation.brace}
    );




function-call-arg: '([A-Za-z_][[:word:]]*)\s*(:)\s*(?!:)'{
        1: variable.parameter,
        2: punctuation.colon
    }? expr;

struct-literal-field:
    (`.`{punctuation.period})
    ('[A-Za-z_][A-Za-z0-9_]*'{meta.name.struct.field})
    (`=`{keyword.operator})
    (expr)
    ;

struct-literal-field-list: (struct-literal-field (`,`{punctuation.comma})?)*;

primary-expr
    : length-literal
    | number-literal
    | constant-literal
    | string-literal
    | fstring-literal
    | array-literal
    | enum-literal
    | `(`{punctuation.paren} expr `)`{punctuation.paren}
    | (`{`{punctuation.brace.struct-start} struct-literal-field-list `}`{punctuation.brace.struct-end})
    | '(::)?(?!not)([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'{
        1: punctuation.scope,
        2: variable.other,
        3: punctuation.scope,
        4: variable.other
    }
    ;

postfix-expr2
    : `(`{punctuation.paren.call-start}
        (function-call-arg (`,`{punctuation.comma})?)*
      `)`{punctuation.paren.call-end}
    | `[`{punctuation.bracket.subscript-start}
        expr (`:`{punctuation.colon.slice} expr)?
      `]`{punctuation.bracket.subscript-end}
    | `{`{punctuation.brace.struct-start} struct-literal-field-list `}`{punctuation.brace.struct-end}
    | `!`{keyword.operator.deref}
    | '\?(?!\?)'{keyword.operator.qn}
    | `...`{keyword.operator.ellipsis}
    | `.`{punctuation.operator.dot} IDENTIFIER{meta.name.field}
    ;

postfix-expr: primary-expr '\s*' postfix-expr2*;

unary-expr
    : postfix-expr
    | `*`{keyword.operator.move} unary-expr
    | `&`{keyword.operator.addr} `mut`{storage.modifier.mut}? unary-expr
    | `+`{keyword.operator.plus} unary-expr
    | `-`{keyword.operator.minus} unary-expr
    | `not`{keyword.operator.not} unary-expr
    ;

binop-expr: unary-expr binop-expr2?;

binop-expr2
    : `+=`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `-=`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `*=`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `/=`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `%=`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `<=`{keyword.operator.binop.compare} unary-expr binop-expr2
    | `>=`{keyword.operator.binop.compare} unary-expr binop-expr2
    | `==`{keyword.operator.binop.compare} unary-expr binop-expr2
    | `!=`{keyword.operator.binop.compare} unary-expr binop-expr2
    | `??`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `and`{keyword.operator.binop.logical} unary-expr binop-expr2
    | `or`{keyword.operator.binop.logical} unary-expr binop-expr2
    | `&&`{keyword.operator.binop.logical} unary-expr binop-expr2
    | `||`{keyword.operator.binop.logical} unary-expr binop-expr2
    | `+`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `-`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `*`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `/`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `%`{keyword.operator.binop.arith} unary-expr binop-expr2
    | `<`{keyword.operator.binop.compare} unary-expr binop-expr2
    | `>`{keyword.operator.binop.compare} unary-expr binop-expr2
    | `≤`{keyword.operator.binop.compare} unary-expr binop-expr2
    | `≥`{keyword.operator.binop.compare} unary-expr binop-expr2
    | `=`{keyword.operator.binop.assign} unary-expr binop-expr2
    | '(?=;)'?
    ;

expr: binop-expr;

hook-exec-block: '(@\s*(?:layout|position|post|render))(?=\s+|\{)'{1: storage.modifier} block-stmt;


return-stmt: `return`{keyword.return} expr? `;`{punctuation.terminator};

block-stmt
    : ('\s*\{'{punctuation.brace.block-start} stmt* '\}'{punctuation.brace.block-end})
    | stmt
    ;

else-stmt{meta.control-flow.else-stmt}:
    `else`{keyword.else} block-stmt;

if-stmt{meta.control-flow.if-stmt}:
    `if`{keyword.if} `(`{punctuation.paren.if-start} expr `)`{punctuation.paren.if-end}
    block-stmt
    ;

while-loop:
    `while`{keyword.while} `(`{punctuation.paren.while-start} expr `)`{punctuation.paren.while-end}
    block-stmt
    ;

import-stmt:
    `import`{keyword.import} string-literal `;`{punctuation.terminator}
    ;

break-stmt:
    `break`{keyword.break} `;`{punctuation.terminator}
    ;

continue-stmt:
    `continue`{keyword.continue} `;`{punctuation.terminator}
    ;

stmt: block-comment
    | line-comment
    | func-defn
    | var-defn
    | struct-defn
    | enum-defn
    | return-stmt
    | if-stmt
    | else-stmt
    | break-stmt
    | continue-stmt
    | import-stmt
    | namespace-defn
    | while-loop
    | hook-exec-block
    | expr `;`{punctuation.terminator}
    | `;`{punctuation.terminator}
    ;

type: '\b(any|int|bool|char|void|float|string|Inline(Ref)?|Block(Ref)?|LayoutObject(Ref)?|Length|Position|AbsPosition)\b'{support.type.builtin}
    | `?`{keyword.operator.type} type
    | `&`{keyword.operator.type} `mut`{storage.modifier.mut}? type
    | '([A-Za-z_][[:word:]]*)(?:\s*(::)\s*([A-Za-z_][[:word:]]*))*'{
        1: meta.name.scope-part,
        2: punctuation.scope,
        3: meta.name.scope-part
    }
    | ( `(`{punctuation.paren.fn-type-start}
            (type? (`,`{punctuation.comma} type)*)
        `)`{punctuation.paren.fn-type-start}
    ) `->`{punctuation.arrow} type
    | ( `[`{punctuation.bracket.array-type-start} type (`...`{keyword.operator.ellipsis})? `]`{punctuation.bracket.array-type-end} )
    ;




number-literal: '\b([[:digit:]]+(\.([[:digit:]]+))?)\b'{constant.numeric};

length-literal: '\b([[:digit:]]+(\.([[:digit:]]+))?)(\s*(ex|em|rem|mm|cm|in|pt|pc))\b'{constant.numeric.length};

constant-literal: '\b(true|false|null)\b'{constant.language};

array-literal:
    (`[`{punctuation.bracket})
    (`:`{punctuation.colon} type)?
    (
        expr
        (`,`{punctuation.comma} expr)*
    )?
    (`]`{punctuation.bracket})
    ;

enum-literal:
    (`.`{punctuation.period})
    IDENTIFIER{meta.name.enumerator}
    ;

string-escapes
    : '\\\{|\\\}|\\\\|\\n|\\t|\\b|\\"|\\\''{constant.character.escape}
    | '\\x[[:xdigit:]]{2}'{constant.character.escape}
    | '\\u[[:xdigit:]]{4}'{constant.character.escape}
    | '\\U[[:xdigit:]]{8}'{constant.character.escape}
    ;

string-literal {string.quoted.double, include-prototype: false}:
    '"'{punctuation.quote}
        (string-escapes | '[^"]')*
    '"'{punctuation.quote};

fstring-contents
    : string-escapes
    | `{`{punctuation.brace.fstring-expr-start} expr `}`{punctuation.brace.fstring-expr-end}
    | '[^"]'{string.quoted.double}
    ;

fstring-literal {include-prototype: false}:
    '(f)(")'{1: storage.type.string, 2: punctuation.quote.fstring-start}
        fstring-contents*
    '(")'{1: punctuation.quote.fstring-end}
    ;
