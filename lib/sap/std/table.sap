# table.sap
# Copyright (c) 2024, zhiayang
# SPDX-License-Identifier: Apache-2.0

namespace std
{
	using Margins = builtin::DocumentMargins;

	struct TableConfig
	{
		cols: int;
		column_widths: ?[?Length] = null;

		rows: ?int = null;
		width: ?Length = null;

		cell_padding: ?Margins = null;
	}

	namespace impl
	{
		fn hline(width: Length) -> [builtin::PathSegment]
		{
			return [
				.Move(pos: {x: 0mm, y: 0mm}),
				.Line(pos: {x: width, y: 0mm})
			];
		}

		struct CallbackState
		{
			remaining: [Block];
			column_widths: [Length];
		};

		fn table_row_callback(context: &void) -> Block
		{
			let ctx = cast(context, &CallbackState)!;
			return \para {Hello};
		}
	}


	fn table(config: TableConfig, mut items: [Block...]) -> ?Block
	{
		using builtin::println;
		using builtin::make_path;
		using builtin::PathStyle;

		let doc = builtin::document();

		if(items.size() % config.cols != 0)
			println(f"warning: number of items is not a multiple of number of rows");

		# round up the number of rows
		let cfg = config //? {
			rows: (items.size() + .cols - 1) / .cols,
			width: doc!.content_size.x,
			cell_padding: (config.cell_padding ?? Margins{}) //? {
				top: 0.5em,
				left: 0.5em,
				right: 0.5em,
				bottom: 0.5em,
			}
		};

		var given_col_widths = cfg.column_widths ?? (cfg.cols * [:?Length null]);
		if(given_col_widths.size() < cfg.cols)
		{
			println(f"warning: insufficient given column widths");
			given_col_widths += (cfg.cols - given_col_widths.size()) * [:?Length null];
		}

		let line_width = 2.5mm;
		let line_style = PathStyle {
			stroke_colour: builtin::Colour {type: .RGB, rgb: {r: 1, g: 0, b: 1}},
			line_width,
		};

		var total_fixed_width = 0mm;
		var num_unspecified_cols = 0;
		for(var i = 0; i < given_col_widths.size(); i += 1)
		{
			total_fixed_width += given_col_widths[i] ?? 0mm;
			if(given_col_widths[i] != null)
				num_unspecified_cols += 1;
		}

		var default_width = (cfg.width!
				- total_fixed_width - line_width
				- (cfg.cols * (cfg.cell_padding!.left! + cfg.cell_padding!.right!))
			) / num_unspecified_cols;

		var col_widths: [Length] = [];
		for(var i = 0; i < cfg.cols; i += 1)
			col_widths += [given_col_widths[i] ?? default_width];

		# idk what tf was going on previously, but new idea:
		# keep outputting rows (and just draw the horizontal rules) until we reach the next page (or the table ends)
		# *then* draw the vertical rules? will that work or am i missing some edge case...?
		#
		# i assume we have a way to restrict the width of a container/block via the api right

		var vlines: [Block] = [];
		for(var i = 0; i < cfg.cols; i += 1)
		{
			vlines += [
				make_path(style: line_style, .Move(pos:{x:0mm,y:0mm}), .Line(pos:{x:0mm,y:100mm})),
				builtin::hspace(cfg.cell_padding!.left! - line_width/2),
				builtin::hspace(col_widths[i]),
				builtin::hspace(cfg.cell_padding!.right! - line_width/2),
			];
		}

		vlines += [make_path(style: line_style, .Move(pos:{x:0mm,y:0mm}), .Line(pos:{x:0mm,y:100mm}))];

		for(var y = 0; y < cfg.rows!; y += 1)
		{
			var cur_offset: Length = line_width;
			for(var x = 0; x < cfg.cols; x += 1)
			{
				let item = &mut items[x + y * cfg.cols];

				cur_offset += cfg.cell_padding!.left!;

				item!.offset_position({ x: cur_offset, y: 0em });
				item!.set_width(col_widths[x]);
				item!.set_style({horz_alignment: .Centred});

				cur_offset += col_widths[x];
				cur_offset += cfg.cell_padding!.right!;
			}
		}

		return builtin::make_zbox(
			make_path(style: line_style, ...impl::hline(cfg.width!)),
			builtin::make_zbox(...*items),
			builtin::make_hbox(...*vlines),
		);
	}
}
